- hosts: all
  gather_facts: true

  tasks:
    - name: Ensure correct nproc soft limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: soft
        limit_item: nproc
        value: "800000"

    - name: Ensure correct nproc hard limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: hard
        limit_item: nproc
        value: "800000"

    - name: Ensure correct nofile soft limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: soft
        limit_item: nofile
        value: "65535"

    - name: Ensure correct nofile hard limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: hard
        limit_item: nofile
        value: "65535"

    - name: Setup sysctl params
      become: yes
      become_user: root
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_set: yes
      with_items:
        - { key: "net.ipv4.tcp_keepalive_time", value: "1800" }
        - { key: "kernel.threads-max", value: "4096000" }
        - { key: "kernel.pid_max", value: "200000" }
        - { key: "vm.max_map_count", value: "600000" }

    - name: Setup ufw firewall rules
      become: yes
      become_user: root
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
        state: enabled
      with_items:
        - "8000"
        - "443"
        - "80"
        - "22"
        - "{{POSTPORT}}"
      when:
        - ansible_facts['distribution'] == "Ubuntu"
        - ansible_facts['distribution_major_version'] >= "20"

    - name: Setup firewalld rules
      become: yes
      become_user: root
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      with_items:
        - "8000"
        - "443"
        - "80"
        - "22"
        - "{{POSTPORT}}"
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] >= "7"

    - name: Enable firewalld service
      become: yes
      become_user: root
      systemd:
        state: restarted
        daemon_reload: yes
        enabled: yes
        name: firewalld
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] >= "7"

    - name: Ensure limits are correct for jupyter account
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "{{ item }}"
      with_items:
        - "ulimit -u 641465"
        - "ulimit -n 65535"

    - name: Copy the skeleton content under /etc/skel
      become: yes
      become_user: root
      ansible.posix.synchronize:
        dest: /etc/skel/
        src: '{{ JUPPROC }}/skel/'

    - name: Test .profile file
      command: ls "{{ ansible_env.HOME }}/.profile"
      register: profile_path
      ignore_errors: true
      changed_when: false

    - name: Ensure we have a .profile file for DEB systems
      copy:
        src: /etc/skel/.profile
        dest: "{{ ansible_env.HOME }}/.profile"
      when:
        - profile_path.rc != 0
        - ansible_facts['os_family'] == "Debian"

    - name: Ensure we have a .profile file for RPM systems
      copy:
        src: /etc/skel/.bash_profile
        dest: "{{ ansible_env.HOME }}/.profile"
      when:
        - profile_path.rc != 0
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] == "7"

    - name: Ensure vim is the default EDITOR
      lineinfile:
        path: "{{ ansible_env.HOME }}/.profile"
        line: export EDITOR=vim

    - name: Setup logind.conf
      become: yes
      become_user: root
      lineinfile:
        path: /etc/systemd/logind.conf
        line: UserTasksMax=100000
        state: present

    - name: Expand template for /etc/hosts
      become: yes
      become_user: root
      template:
        src: "{{ JUPPROC }}/hosts.j2"
        dest: "/etc/hosts"
        mode: 0644
        owner: root

    - name: Create directory "{{ JPHUB }}" if needed
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Enable Jupyterhub service
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: jupyterhub

    - name: Ensure listening port in postfix master.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/master.cf
        regex: '^smtp\s*inet'
        line: '{{ POSTPORT }}      inet  n       -       y       -       -       smtpd'
        state: present

    - name: Ensure myhostname in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^myhostname ='
        line: "myhostname = {{ JPHOST }}"
        state: present

    - name: Ensure mydestination in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^mydestination ='
        line: "mydestination = $myhostname, {{ JPHOST.split('.')[0] }}, {{ JPHOSTEXT }}, {{ JPHOSTEXT.split('.')[0] }}, localhost, localhost.localdomain"
        state: present

    - name: Deploy an instanciated procmailrc conf file
      template:
        src: "{{ JUPPROC }}/procmailrc.j2"
        dest: "{{ ansible_env.HOME }}/.procmailrc"
        mode: 0600

    - name: Deploy instanciated scripts
      template:
        src: "{{ WODSCRIPTDIR }}/{{ item }}.j2"
        dest: "{{ WODSCRIPTDIR }}/{{ item }}"
        mode: 0700
      with_items:
        - procmail-action.sh
        - test-action.sh
        - cleanup-users.sh
        - functions.sh
        - get-cloudvol-token.shc

    - name: Enable postfix service
      become: yes
      become_user: root
      systemd:
        state: restarted
        daemon_reload: yes
        enabled: yes
        name: postfix

    - name: Install the pkg update script
      become: yes
      become_user: root
      copy:
        src: "{{ WODSCRIPTDIR }}/upd.{{ ansible_pkg_mgr }}"
        dest: /usr/local/bin/upd
        owner: root
        group: root
        mode: 0700

    - name: Setup crontab for daily pkg security update
      become: yes
      become_user: root
      cron:
        name: upd
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "03"
        user: root
        job: "/usr/local/bin/upd"
        cron_file: upd
        state: present

    - name: Install the deliver script
      become: yes
      become_user: root
      template:
        src: "{{ WODSCRIPTDIR }}/deliver.j2"
        dest: /usr/local/bin/deliver
        owner: root
        group: root
        mode: 0755

    - name: Setup crontab for daily delivery of ansible instantiated files
      become: yes
      become_user: root
      cron:
        name: deliver
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "04"
        user: jupyter
        job: "/usr/local/bin/deliver"
        cron_file: deliver
        state: present

    - name: Install the check-template script
      become: yes
      become_user: root
      template:
        src: "{{ WODSCRIPTDIR }}/check-template.j2"
        dest: /usr/local/bin/check-template
        owner: root
        group: root
        mode: 0755

    - name: Setup crontab for daily check of template in dev user home dir
      become: yes
      become_user: root
      cron:
        name: check-template
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "05"
        user: root
        job: "/usr/local/bin/check-template"
        cron_file: check-template
        state: present

    - name: Deliver create/reset scripts as ansible template for variable expansion
      template: src={{ item }} dest={{ WODSCRIPTDIR }}/{{ item | basename | regex_replace('\.j2$') }} mode=0755
      with_fileglob: [ '{{ WODSCRIPTDIR }}/reset-*.sh*.j2', '{{ WODSCRIPTDIR }}/create-*.sh*.j2' ]

    - name: Deliver variables files as ansible template for variable expansion
      template: src={{ item }} dest={{ JUPPROC }}/ansible-jupyter/{{ WODGROUP }}/{{ item | basename | regex_replace('\.j2$') }} mode=0644
      with_fileglob: [ '{{ JUPPROC }}/ansible-jupyter/{{ WODGROUP }}/*.yml.j2' ]

    - name: Ensure that directory /student exists
      become: yes
      become_user: root
      file:
        path: "/student"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0711

    - name: Lockdown /home
      become: yes
      become_user: root
      file:
        path: "/home"
        state: directory
        owner: root
        group: root
        mode: 0711

    - name: Ensure that directory {{ ansible_env.HOME }}/.mail exists
      file:
        path: "{{ ansible_env.HOME }}/.mail"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0750

    - name: Ensure that file vault_secret in {{ JUPPROC }}/ansible-jupyter/ exists
      lineinfile:
        path: "{{ JUPPROC }}/ansible-jupyter/vault_secret"
        regexp: '^{{ VAULTPWD }}$'
        line: '{{ VAULTPWD }}'

    - name: Fix modes for {{ JUPPROC }}/ansible-jupyter/vault_secret
      file:
        path: "{{ JUPPROC }}/ansible-jupyter/vault_secret"
        mode: 0600

    - name: Fix git config for future commit on student0
      lineinfile:
        path: "{{ ansible_env.HOME }}/student0/.git/config"
        line: "sshCommand = ssh -i ~/.ssh/id_student0 -F /dev/null"
        insertafter: '^\s+logallrefupdates'

    - name: Fix git config for future commit on jupyter-procmail
      lineinfile:
        path: "{{ JUPPROC }}/.git/config"
        line: "sshCommand = ssh -i ~/.ssh/id_jupproc -F /dev/null"
        insertafter: '^\s+logallrefupdates'

    - name: Remove existing jupyter users
      command:
        cmd: "curl -X DELETE --silent -k -H 'Authorization: token {{ JPHUBTOKEN }}' {{ JPHUBAPISRV }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Remove Linux users and their home directory
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: absent
        remove: yes
        force: yes
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Ensure dedicated students groups exist
      become: yes
      become_user: root
      group:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        gid: "{{ item + GIDBASE }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Ensure Linux students users exists with their home dir
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        create_home: true
        home: "/student/{{ 'student%s' | format(item) }}"
        comment: "{{ 'student%s' | format(item) }}"
        shell: /bin/bash
        uid: "{{ item + UIDBASE }}"
        group: "{{ 'student%s' | format(item) }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Ensure jupyter students users exist
      command:
        cmd: "curl -X POST --silent -k -H 'Authorization: token {{ JPHUBTOKEN }}' {{ JPHUBAPISRV }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "/student/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        state: present
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup default ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "/student/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        default: yes
        state: present
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
