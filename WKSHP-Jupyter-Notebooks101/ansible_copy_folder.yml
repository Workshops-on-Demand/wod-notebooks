# Playbook expects to have a Student0 folder in the directory where the playbook is run
# # All variables in upper case come from the procmail-action.sh script
- hosts: all
  gather_facts: true
  vars:
    VARDIR: "{{ JUPPROC }}/ansible-jupyter/{{ WODGROUP }}"

  tasks: 
    - fail:
        msg: STDID variable is empty ! Fat fingers ?!?
      when: STDID is not defined

    - fail:
        msg: WORKSHOP variable is empty ! Fat fingers ?!?
      when: WORKSHOP is not defined

    - fail:
        msg: WODGROUP variable is empty ! Fat fingers ?!?
      when: WODGROUP is not defined

    - name: check variables file exists
      stat:
        path: "{{ VARDIR }}/variables_{{ WORKSHOP }}.yml"
      ignore_errors: true
      register: variables_file

    - include_vars:
        file: "{{ VARDIR }}/variables_{{ WORKSHOP }}.yml"
      when: variables_file.stat.exists
  
    - name: check password file exists
      stat:
        path: "{{ VARDIR }}/variables_{{ WORKSHOP }}_pass.yml"
      ignore_errors: true
      register: pass_file

    - include_vars:
        file: "{{ VARDIR }}/variables_{{ WORKSHOP }}_pass.yml"
      when: pass_file.stat.exists
  
    # find all notebooks
    - name: find jupyter notebooks
      find:
        paths: "{{ STD0DIR }}/{{ DIR }}/{{ WORKSHOP }}"
        recurse: yes
        # Add other file types to process them as ansible templates
        patterns: 
          - "*.ipynb"
          - "*.yaml"
          - "*.py"
          - "Variables.ps1"
        excludes: '*-checkpoint.ipynb'
      register: notebooks

    - name: debug
      debug: 
        msg: "{{ notebooks.files }}"

        #- name: debug
        #debug: 
        #msg: "{{ ansible_facts }}"


        #- name: debug
        #debug: 
        #msg: "{{ OVIP }}"

        #- name: debug-OVIP
        #debug: 
        #msg: "{{ item.key }} => {{ item.value }}" 
        #with_dict: "{{ OVIP }}"
        #when: "{{ STDID }} == {{ item.key }}"

        #   - name: Cleanup Outputs, metadata and execution_count
        #shell: |
        #jq '(.cells[] | select(has("outputs")) | .outputs) = []
        #| (.cells[] | select(has("execution_count")) | .execution_count) = null
        #| .cells[].metadata = {}' "{{ item.path }}" | sponge "{{ item.path }}"
        #with_items: "{{ notebooks.files }}"
        #when: item.path is not search("Variables.ps1")
 
    # Synchronize target students with student0 Workshop content
    - name: synchronize master folder
      ansible.posix.synchronize:
        src: "{{ STD0DIR }}/{{ DIR }}/{{ WORKSHOP }}/"
        dest: "{{ STDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        rsync_opts: 
          - "--exclude=*.ipynb --exclude=*.py --exclude=Variables.ps1"

      #- name: debug
      #debug:
      #msg: "PASSSTU:{{ PASSSTU }}"

    - name: Deliver notebooks as ansible template for variable expansion
      template:
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace(STD0DIR, STDDIR + '/student' + STDID) }}"
      with_items: "{{ notebooks.files }}"

    - name: Adapt owner/group/modes for target workshop
      become: yes
      become_user: root
      file:
        path: '{{ STDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}'
        owner: student{{ STDID }}
        group: student{{ STDID }}
        recurse: yes
        mode: u+rwx
      
    - name: setup ACL for the Workshop
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        state: present
      
    - name: setup default ACL for the Workshop
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        default: yes
        state: present
