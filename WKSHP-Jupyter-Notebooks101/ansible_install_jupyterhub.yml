- hosts: all
  gather_facts: true
  vars_files:
    - "group_vars/{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
  vars:
    IJAVAVER: "1.3.0"

  tasks:
    - name: Ensure that common packages are installed for repo setup
      become: yes
      become_user: root
      package:
        pkg:
        - curl
        - gnupg2
        state: present
        update_cache: yes

    - name: Ensure that required packages are installed for repo setup
      become: yes
      become_user: root
      apt:
        pkg:
        - apt-transport-https
      when:
       - ansible_facts['os_family'] == "Debian"

    - name: Add universe repository into sources list
      become: yes
      become_user: root
      apt_repository:
        repo: deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }}-security universe
        state: present
      when:
       - ansible_facts['distribution'] == "Ubuntu"
       - ansible_facts['distribution_major_version'] == "20"

    - name: Add EPEL repository into repo list
      become: yes
      become_user: root
      yum:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts['distribution_major_version'] }}.noarch.rpm"
        state: present
      when:
        - ansible_facts['distribution'] == "CentOS"

    - name: Add CentOS SC repository into repo list
      become: yes
      become_user: root
      yum:
        name: centos-release-scl-rh
        state: present
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] == "7"

    - name: Add conda GPG Key to APT
      become: yes
      become_user: root
      apt_key:
        url: https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc
        state: present
      when:
       - ansible_facts['distribution'] == "Ubuntu"
       - ansible_facts['distribution_major_version'] == "20"

      # TODO: Do it for EPEL if really needed
    - name: Add conda APT repository
      become: yes
      become_user: root
      apt_repository:
        repo: deb [arch=amd64] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main
        state: present
      when:
       - ansible_facts['distribution'] == "Ubuntu"
       - ansible_facts['distribution_major_version'] == "20"

    - name: Add K8s GPG Key to APT
      become: yes
      become_user: root
      apt_key:
        url: https://packages.cloud.google.com/apt/doc//apt-key.gpg.asc
        state: present
      when:
       - ansible_facts['os_family'] == "Debian"

    - name: Add K8s GPG Key to RPM DB
      become: yes
      become_user: root
      rpm_key:
        key: "{{ item }}"
        state: present
      with_items:
        - https://packages.cloud.google.com/yum/doc/yum-key.gpg
        - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      when:
        - ansible_facts['distribution'] == "CentOS"

    - name: Add K8s APT repository
      become: yes
      become_user: root
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
      when:
       - ansible_facts['distribution'] == "Ubuntu"
       - ansible_facts['distribution_major_version'] == "20"

    - name: Add K8s YUM repository
      become: yes
      become_user: root
      yum_repository:
        name: k8s
        baseurl: "https://packages.cloud.google.com/yum/repos/kubernetes-el{{ ansible_facts['distribution_major_version'] }}-$basearch"
        description: "Upstream K8s Yum repository"
        enabled: yes
        state: present
      when:
        - ansible_facts['distribution'] == "CentOS"

    - name: Remove Microsoft repo file just in case
      become: yes
      become_user: root
      file:
        path: /etc/apt/sources.list.d/microsoft-prod.list
        state: absent
      when:
       - ansible_facts['os_family'] == "Debian"

    - name: Remove MicroSoft repo package
      become: yes
      become_user: root
      package:
        pkg:
        - packages-microsoft-prod
        state: absent

    - name: Setup MicroSoft repo for APT
      become: yes
      become_user: root
      apt:
        deb: https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_version }}/packages-microsoft-prod.deb
      when:
       - ansible_facts['distribution'] == "Ubuntu"
       - ansible_facts['distribution_major_version'] == "20"

    - name: Setup MicroSoft repo for YUM
      become: yes
      become_user: root
      yum:
        name: "https://packages.microsoft.com/config/centos/{{ ansible_facts['distribution_major_version'] }}/packages-microsoft-prod.rpm"
        state: present
      when:
        - ansible_facts['distribution'] == "CentOS"

    - name: Update apt cache
      become: yes
      become_user: root
      apt:
        update_cache: yes
      changed_when: False
      when:
        - ansible_facts['os_family'] == "Debian"

    - name: Ensure all required packages are installed
      become: yes
      become_user: root
      package:
        pkg:
        - ansible
        - python3
        - python3-pip
        - python3-jmespath
        - python3-virtualenv
        - python3-wheel
        - git
        - rsync
        - acl
        - wget
        - bzip2
        - firefox
        - jq
        - httpie
        - moreutils
        - net-tools
        - nodejs
        - npm
        - vim
        - telnet
        - pandoc
        - clang
        - cmake
        - golang
        - texlive-xetex
        - aspnetcore-runtime-3.1
        - aspnetcore-runtime-5.0
        - dotnet-runtime-3.1
        - dotnet-runtime-5.0
        - dotnet-sdk-3.1
        - dotnet-sdk-5.0
        - postfix
        - procmail
        - conda
        - kubectl
        - libgdiplus
        - cargo
        - rustc
        - man
        - unzip
        - shc
        - patch
        update_cache: yes

    - name: Ensure all required DEB packages are installed
      become: yes
      become_user: root
      apt:
        pkg:
        - python3-dev
        - python3-venv
        - python3-ipywidgets
        - apt-file
        - ldap-utils
        - default-jre
        - default-jdk
        - texlive-fonts-recommended
        - texlive-latex-recommended
        - software-properties-common
        - lld
        - libzmq3-dev
        - libc6-dev
        - nfs-common
      when:
        - ansible_facts['os_family'] == "Debian"

    - name: Ensure all required RPM packages are installed
      become: yes
      become_user: root
      yum:
        pkg:
        - python3-devel
        - openldap-clients
        - glibc-devel
        - java
        - llvm-toolset-7.0-lld
        - nfs-utils
        - zeromq-devel
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] == "7"

    - name: Ensure all required node.js packages are installed
      become: yes
      become_user: root
      community.general.npm:
        name: "{{ item }}"
        global: yes
      with_items:
        - json
        - configurable-http-proxy

    - name: Remove a set of existing pip packages
      pip:
        name:
        - jupyterhub
        - jupyterlab
        - pyhpecfm==0.1.6
        - hpeOneView
        - ansible-kernel
        - bash_kernel
        - sshkernel
        - powershell_kernel
        - redfish
        - jupyter-docx-bundler
        state: absent
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
      when: CLEAN|bool
      ignore_errors: true

    - name: Remove directory "{{ JPHUB }}"
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: absent
      when: CLEAN|bool

    - name: Create directory "{{ JPHUB }}" if needed
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure all additional pip packages are installed
      pip:
        name:
        - ipywidgets
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] == "7"

    - name: Ensure all required pip packages are installed
      pip:
        name:
        - jupyterhub
        - jupyterlab
        - pyhpecfm==0.1.6
        - hpeOneView
        - ansible-kernel
        - bash_kernel
        - sshkernel
        - powershell_kernel
        - redfish
        - jupyter-docx-bundler
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"

    - name: Ensure Go kernel is installed
      shell: env GO111MODULE=off go get -d -u github.com/gopherdata/gophernotes && cd "{{ ansible_env.HOME }}/go/src/github.com/gopherdata/gophernotes" && env GO111MODULE=on go install && mkdir -p {{ JPHUB }}/share/jupyter/kernels/gophernotes && cp kernel/* {{ JPHUB }}/share/jupyter/kernels/gophernotes

    - name: Ensure required directories under /usr/local are owned by jupyter
      become: yes
      become_user: root
      file:
        path: "{{ item }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0755
      with_items:
        - /usr/local/bin
        - /usr/local/share
        - /usr/local/share/powershell
        - /usr/local/share/powershell/Modules

    - name: Make gophernotes available under /usr/local/bin
      copy:
        src: "{{ ansible_env.HOME }}/go/bin/gophernotes"
        dest: /usr/local/bin/gophernotes
        owner: jupyter
        group: jupyter
        mode: 0755

    - name: Cleanup intermediate go directory
      become: yes
      become_user: root
      file:
        path: '{{ ansible_env.HOME }}/go'
        state: absent

    - name: Make kernel_python available under /usr/local/bin
      copy:
        src: "{{ WODSCRIPTDIR }}/kernel_python"
        dest: /usr/local/bin/kernel_python
        owner: jupyter
        group: jupyter
        mode: 0755

    - name: Fix python kernel path to include virtualenv setup
      lineinfile:
        path: "{{ JPHUB }}/share/jupyter/kernels/python3/kernel.json"
        regexp: '^\s*"python",$'
        line: '   "/usr/local/bin/kernel_python",'
        state: present

    - name: Ensure Rust kernel directory is installed
      file:
        path: "{{ JPHUB }}//share/jupyter/kernels/rust"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure Rust kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && "{{ JUPPROC }}/evcxr_jupyter.{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}" --install

    - name: Ensure Rust kernel files are installed
      copy:
        src: "{{ item }}"
        dest: "{{ JPHUB }}//share/jupyter/kernels/rust/{{ item | basename }}"
        owner: jupyter
        group: jupyter
        mode: 0644
      with_fileglob: [ '{{ ansible_env.HOME }}/.local/share/jupyter/kernels/rust/*' ]

    - name: Ensure Rust kernel is deployed
      copy:
        src: "{{ JUPPROC }}/evcxr_jupyter.{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}"
        dest: "/usr/local/bin/evcxr_jupyter"
        owner: jupyter
        group: jupyter
        mode: 0755

    - name: Extract iJava kernel
      unarchive:
        src: https://github.com/SpencerPark/IJava/releases/download/v{{ IJAVAVER }}/ijava-{{ IJAVAVER }}.zip
        dest: "{{ ansible_env.HOME }}"
        remote_src: yes

    - name: Ensure jupyter IJava kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && cd {{ ansible_env.HOME }} && python3 install.py --prefix={{ JPHUB }}

    - name: Ensure jupyter docx bundle is installed
      shell: . '{{ JPHUB }}/bin/activate' && cd {{ ansible_env.HOME }} && jupyter bundlerextension enable --py jupyter_docx_bundler --prefix={{ JPHUB }}

    - name: Ensure jupyter ssh kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && python3 -m sshkernel install --sys-prefix

    - name: Ensure jupyter kernels are installed
      shell: . '{{ JPHUB }}/bin/activate' && python3 -m "{{ item }}.install" --prefix={{ JPHUB }}
      with_items:
        - bash_kernel
        - powershell_kernel
        - ansible_kernel
      changed_when: False

    - name: Fix ansible kernel path to include virtualenv setup
      replace:
        path: "{{ JPHUB }}/share/jupyter/kernels/{{ item }}/kernel.json"
        regexp: '(.+)"/opt/jupyterhub/bin/python3",(.+)$'
        replace: '\1"/usr/local/bin/kernel_python",\2'
      with_items:
        - ansible
        - ssh

    - name: Check whether to patch ansible kernel
      command: "grep Loader=yaml.FullLoader {{ JPHUB }}/{{ python_lib }}/ansible_kernel/convert_playbook.py"
      register: patch_done
      ignore_errors: true
      changed_when: False

    - name: Patch ansible kernel with fixes coming from master
      ansible.posix.patch:
        src: "{{ JUPPROC }}/master-vs-0.9.0.patch"
        basedir: "{{ JPHUB }}/{{ python_lib }}/ansible_kernel"
        strip: 2
        backup: yes
      when: patch_done.rc != 0

    - name: Install HPE OneView collection in virtualenv
      shell: . '{{ JPHUB }}/bin/activate' && {{ JPHUB }}/bin/ansible-galaxy collection install -p {{ JPHUB }}/{{ python_lib }} hpe.oneview

    - name: Remove former kernel files installed locally
      file:
        path: '{{ ansible_env.HOME }}/.local/share/jupyter/kernels'
        state: absent
      
    - name: Test kubectl-hpecp presence
      command: ls /usr/local/bin/kubectl-hpecp
      register: kubectl_path
      ignore_errors: true
      changed_when: false

    - name: Ensure kubectl-hpecp is installed
      copy:
        src: "{{ JUPPROC }}/kubectl-hpecp-5-1-Linux"
        dest: /usr/local/bin/kubectl-hpecp
        mode: 0755
      when: kubectl_path.rc != 0

    - name: Test pwsh presence
      command: ls /usr/local/bin/pwsh
      register: pwsh_path
      ignore_errors: true
      changed_when: false

    - name: Ensure powershell is installed through dotnet
      command: dotnet tool install --tool-path /usr/local/bin powershell
      when: pwsh_path.rc != 0

    - name: Ensure powershell scripts are installed
      command: "{{ WODSCRIPTDIR }}/install_PwshModules.sh"

    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Test Jupyterhub service presence
      command: ls /etc/systemd/system/jupyterhub.service
      register: serv_path
      ignore_errors: true
      changed_when: false

    - name: Disable Jupyterhub service
      become: yes
      become_user: root
      systemd:
        state: stopped
        daemon_reload: yes
        enabled: no
        name: jupyterhub
      when: serv_path.rc == 0

    - name: Remove jupyterhub configuration file
      file:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        state: absent

    - name: Generate jupyterhub configuration
      command: "{{ JPHUB }}/bin/jupyterhub --generate-config"
      args:
        chdir: "{{ JPHUB }}/etc/jupyterhub/"

    - name: Adapt jupyterhub configuration file
      blockinfile:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        block: |
          #####################################################################################
          c.Authenticator.admin_users = {'jupyter'}
          c.Authenticator.whitelist = {'jupyter'}
          c.Spawner.default_url = '/lab'
          c.JupyterHub.tornado_settings = {'cookie_options': {'expires_days': 0.17}}
          c.JupyterHub.shutdown_on_logout = True
          c.JupyterHub.redirect_to_server = True
          #####################################################################################

    - name: Copy jupyterhub service file
      become: yes
      become_user: root
      copy:
        src: "{{ JUPPROC }}/jupyterhub.service"
        dest: /etc/systemd/system/jupyterhub.service

    - name: Enable Jupyterhub service
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: jupyterhub

    - name: Wait 3 seconds to let Jupyterhub start
      shell: sleep 3

    - name: Existing token
      debug:
        msg: "Existing token: {{ JPHUBTOKEN }}"

    - name: Test Jupyterhub token
      get_url:
        url: "{{ JPHUBAPISRV }}/hub/api/users/jupyter"
        dest: "/tmp/result.{{ JPHUBTOKEN }}"
        headers:
          Authorization: "token {{ JPHUBTOKEN }}"
      register: answer
      ignore_errors: true
      changed_when: false

    - name: Remove temporary file
      file:
        path: "/tmp/result.{{ JPHUBTOKEN }}"
        state: absent

    - name: Build a new Jupyterhub token
      shell: . '{{ JPHUB }}/bin/activate' && '{{ JPHUB }}/bin/jupyterhub' token jupyter -f '{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py' | tail -1
      register: jup_token
      ignore_errors: true
      changed_when: false
      when: answer.status_code >= 300

    - name: Fix Jupyter token in conf file
      lineinfile:
        path: "{{ JUPPROC }}/ansible-jupyter/group_vars/{{ WODGROUP }}"
        regexp: "^JPHUBTOKEN"
        line: "JPHUBTOKEN: {{ jup_token.stdout_lines[0] }}"
        state: present
      when: answer.status_code >= 300

    - name: Use new token
      set_fact:
        JPHUBTOKEN: "{{ jup_token.stdout_lines[0] }}"
      when: answer.status_code >= 300

    - name: New token
      debug:
        msg: "New token: {{ JPHUBTOKEN }}"
      when: answer.status_code >= 300

    - name: Setup ansible configuration
      copy:
        src: "{{ JUPPROC }}/.ansible.cfg"
        dest: "{{ ansible_env.HOME }}/.ansible.cfg"
        owner: jupyter
        group: jupyter
        mode: 0644

    - name: Enable postfix service
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: postfix

    # For this to work, you need to have a key used in deploy key of the projects
    - name: Checkout notebooks from the jupyter-notebook git repo
      git:
        repo: git@github.com:HPEDevCom/jupyter-notebooks.git
        dest: "{{ ansible_env.HOME }}/student0"
        key_file: "{{ ansible_env.HOME }}/.ssh/id_student0"
